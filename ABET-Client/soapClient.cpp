/* soapClient.cpp
   Generated by gSOAP 2.7.16 from udp.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.7.16 2013-08-27 05:46:56 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__echoString(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *str, char **res)
{	struct ns__echoString soap_tmp_ns__echoString;
	struct ns__echoStringResponse *soap_tmp_ns__echoStringResponse;
	if (!soap_endpoint)
		soap_endpoint = "soap.udp://localhost:10000";
	soap->encodingStyle = NULL;
	soap_tmp_ns__echoString.str = str;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__echoString(soap, &soap_tmp_ns__echoString);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__echoString(soap, &soap_tmp_ns__echoString, "ns:echoString", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__echoString(soap, &soap_tmp_ns__echoString, "ns:echoString", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!res)
		return soap_closesock(soap);
	*res = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__echoStringResponse = soap_get_ns__echoStringResponse(soap, NULL, "ns:echoStringResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (res && soap_tmp_ns__echoStringResponse->res)
		*res = *soap_tmp_ns__echoStringResponse->res;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns__sendString(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *str)
{	struct ns__sendString soap_tmp_ns__sendString;
	if (!soap_endpoint)
		soap_endpoint = "soap.udp://localhost:10000";
	soap->encodingStyle = NULL;
	soap_tmp_ns__sendString.str = str;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__sendString(soap, &soap_tmp_ns__sendString);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__sendString(soap, &soap_tmp_ns__sendString, "ns:sendString", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__sendString(soap, &soap_tmp_ns__sendString, "ns:sendString", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns__sendString(struct soap *soap, struct ns__sendString *_param_1)
{
	soap_default_ns__sendString(soap, _param_1);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns__sendString(soap, _param_1, "ns:sendString", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
